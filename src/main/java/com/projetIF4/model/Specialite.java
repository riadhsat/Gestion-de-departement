package com.projetIF4.model;

//Generated 24 mars 2014 18:11:52 by Hibernate Tools 3.6.0

//~--- non-JDK imports --------------------------------------------------------

import com.projetIF4.hibernate.HibernateUtil;

import org.hibernate.Session;
import org.hibernate.Transaction;

//~--- JDK imports ------------------------------------------------------------

import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * Specialite generated by hbm2java
 */
public class Specialite implements java.io.Serializable {
    private Set     pfes      = new HashSet(0);
    private Set     pfas      = new HashSet(0);
    private Set     etudiants = new HashSet(0);
    private Integer codespe;
    private String  specialite;

    /**
     *
     */
    public Specialite() {}

    /**
     *
     * @param specialite
     */
    public Specialite(String specialite) {
        this.specialite = specialite;
    }

    /**
     *
     * @param specialite
     * @param pfes
     * @param pfas
     * @param etudiants
     */
    public Specialite(String specialite, Set pfes, Set pfas, Set etudiants) {
        this.specialite = specialite;
        this.pfes       = pfes;
        this.pfas       = pfas;
        this.etudiants  = etudiants;
    }

    /**
     *
     * @return
     */
    public Integer getCodespe() {
        return this.codespe;
    }

    /**
     *
     * @param codespe
     */
    public void setCodespe(Integer codespe) {
        this.codespe = codespe;
    }

    /**
     *
     * @return
     */
    public String getSpecialite() {
        return this.specialite;
    }

    /**
     *
     * @param specialite
     */
    public void setSpecialite(String specialite) {
        this.specialite = specialite;
    }

    /**
     *
     * @return
     */
    public Set getPfes() {
        return this.pfes;
    }

    /**
     *
     * @param pfes
     */
    public void setPfes(Set pfes) {
        this.pfes = pfes;
    }

    /**
     *
     * @return
     */
    public Set getPfas() {
        return this.pfas;
    }

    /**
     *
     * @param pfas
     */
    public void setPfas(Set pfas) {
        this.pfas = pfas;
    }

    /**
     *
     * @return
     */
    public Set getEtudiants() {
        return this.etudiants;
    }

    /**
     *
     * @param etudiants
     */
    public void setEtudiants(Set etudiants) {
        this.etudiants = etudiants;
    }

    @Override
    public int hashCode() {
        int hash = 7;

        hash = 67 * hash + Objects.hashCode(this.codespe);
        hash = 67 * hash + Objects.hashCode(this.specialite);

        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        final Specialite other = (Specialite) obj;

        if (!Objects.equals(this.codespe, other.codespe)) {
            return false;
        }

        if (!Objects.equals(this.specialite, other.specialite)) {
            return false;
        }

        return true;
    }

    /**
     *
     * @return
     */
    public boolean save() {
        final Session session = HibernateUtil.currentSession();

        try {
            final Transaction transaction = session.beginTransaction();

            try {
                session.save(this);
                transaction.commit();

                return true;
            } catch (Exception ex) {

                // Log the exception here
                transaction.rollback();

                return false;
            }
        } finally {
            HibernateUtil.closeSession();
        }
    }

    /**
     *
     * @return
     */
    public boolean delete() {
        final Session session = HibernateUtil.currentSession();

        try {
            final Transaction transaction = session.beginTransaction();

            try {
                session.delete(this);
                transaction.commit();

                return true;
            } catch (Exception ex) {

                // Log the exception here
                transaction.rollback();

                return false;
            }
        } finally {
            HibernateUtil.closeSession();
        }
    }

    /**
     *
     * @return
     */
    public boolean update() {
        final Session session = HibernateUtil.currentSession();

        try {
            final Transaction transaction = session.beginTransaction();

            try {
                session.merge(this);
                transaction.commit();

                return true;
            } catch (Exception ex) {

                // Log the exception here
                transaction.rollback();

                return false;
            }
        } finally {
            HibernateUtil.closeSession();
        }
    }
}



